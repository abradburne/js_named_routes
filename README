Named Routes in Javascript
==========================

This uncreatively named plugin installs a controller and view which creates handy javascript methods for generating
named routes in javascript.

For example, if you have the following route defined in routes.rb:

map.resources :posts

You'd get these familiar-looking javascript URL helpers:

posts_url() => "http://localhost:3000/posts"
post_url( {id: 3} ) => 'http://localhost:3000/posts/3'
post_path( {id: 3} ) => '/posts/3'
formatted_post_path( {id: 3, :format, 'xml'} ) => '/posts/3.xml'

The javascript generated by this plugin does not depend on any third party javascript library.

== USAGE

This plugin automatically injects a route for the included JS named routes controller.

Install, and then visit the following URL:

http://myapp.com/javascripts/named_routes.js

Use the above URL in a script tag in your app or use the asset helper like so:

<%= javascript_include_tag :named_routes %>

Just like in Rails, if you specify route segments that aren't part of the route will be added as query parameters:

post_url({id: 3, extra: 'galen'}) => 'http://localhost:3000/posts/3?extra=galen'
post_path({id: 3, extra: 'galen'}) => '/posts/3?extra=galen'
posts_url() => "http://localhost:3000/posts"

This plugin uses page caching to cache the generated javascript routes, but lacks any intelligence for sweeping the
cached file if you've made changes to your routes. That shouldn't be a problem if you are using Capistrano for
production deployments because the cache is normally stored in "RAILS_ROOT/public" which is not kept across
deployments. Caching is normally disabled in development mode, but if you turn on caching you may need to manually
clear the cached file:

cd RAILS_ROOT
rm public/javascripts/named_routes.js

== CREDITS

Some code and the idea came from http://gohanlon.com/2007/7/15/using-rails-named-routes-from-client-side-javascript